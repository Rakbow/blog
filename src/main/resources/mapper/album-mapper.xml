<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.rakbow.website.dao.AlbumMapper">

    <sql id="selectFields">
        id, catalog_no, name_jp, name_zh, name_en, barcode, release_date, publish_format,
        publish_price, album_format, media_format, label, publisher, distributor, copyright,
        has_bonus, bonus, description, remark, series, products, artists, images, track_info,
        added_time, edited_time, _s
    </sql>

    <sql id="insertFields">
        catalog_no, name_jp, name_zh, name_en, barcode, release_date, publish_format, publish_price,
        album_format, media_format, label, publisher, distributor, copyright, has_bonus, bonus, description,
        remark, series, products, artists, images, track_info, added_time, edited_time, _s
    </sql>


    <!--  -->

    <select id="getAlbumById" resultType="Album">
        select
        <include refid="selectFields"></include>
        from album
        where id = #{id} and _s = 1
    </select>

    <select id="getAlbumsByFilter" resultType="Album">
        select
        <include refid="selectFields"></include>
        from album
        <where>
            <if test="seriesId != null and seriesId != '' ">
                and series = #{seriesId}
            </if>
            <if test="productId != null">
                <foreach item="item" index="index" collection="productId" open=""
                         close="" separator="">
                    and json_contains(JSON_EXTRACT(cast(products as json), '$.ids'),JSON_ARRAY( #{item} )) = 1
                </foreach>
            </if>
            <if test="publishFormat != null">
                <foreach item="item" index="index" collection="publishFormat" open=""
                         close="" separator="">
                    and json_contains(JSON_EXTRACT(cast(publish_format as json), '$.ids'),JSON_ARRAY( #{item} )) = 1
                </foreach>
            </if>
            <if test="albumFormat != null">
                <foreach item="item" index="index" collection="albumFormat" open=""
                         close="" separator="">
                    and json_contains(JSON_EXTRACT(cast(album_format as json), '$.ids'),JSON_ARRAY( #{item} )) = 1
                </foreach>
            </if>
            <if test="mediaFormat != null">
                <foreach item="item" index="index" collection="mediaFormat" open=""
                         close="" separator="">
                    and json_contains(JSON_EXTRACT(cast(media_format as json), '$.ids'),JSON_ARRAY( #{item} )) = 1
                </foreach>
            </if>
            <if test="hasBonus != null and hasBonus != '' ">
                and has_bonus = #{hasBonus}
            </if>
            and _s = 1
        </where>
        order by release_date desc
    </select>

    <select id="getAll" resultType="Album">
        select
        <include refid="selectFields"></include>
        from album
        where _s = 1
        <!--        order by id desc-->
        order by release_date desc
        <!-- limit #{offset}, #{limit} -->
    </select>

    <select id="getAlbumLimit" resultType="Album">
        select
        <include refid="selectFields"></include>
        from album
        where _s = 1
        order by #{where}
         limit #{offset}, #{limit}
    </select>

    <select id="getAlbumRows" resultType="int">
        select count(id)
        from album
        where _s = 1
    </select>

    <insert id="addAlbum" parameterType="Album" keyProperty="id">
        insert into album (<include refid="insertFields"></include>)
        values (#{catalogNo}, #{nameJp}, #{nameZh}, #{nameEn}, #{barcode}, #{releaseDate}, #{publishFormat},
        #{publishPrice}, #{albumFormat}, #{mediaFormat}, #{label}, #{publisher}, #{distributor}, #{copyright},
        #{hasBonus}, #{bonus}, #{description}, #{remark}, #{series}, #{products}, #{artists}, #{images},
        #{trackInfo}, #{addedTime}, #{editedTime}, #{_s})
    </insert>

    <update id="updateAlbum" parameterType="Album" keyProperty="id">
        update album
        set
        catalog_no = #{album.catalogNo}, name_jp = #{album.nameJp}, name_zh = #{album.nameZh}, name_en = #{album.nameEn},
        barcode = #{album.barcode}, release_date = #{album.releaseDate}, publish_format = #{album.publishFormat},
        publish_price = #{album.publishPrice}, album_format = #{album.albumFormat}, media_format = #{album.mediaFormat},
        label = #{album.label}, publisher = #{album.publisher}, distributor = #{album.distributor}, copyright =
        #{album.copyright}, has_bonus = #{album.hasBonus}, remark = #{album.remark}, series = #{album.series},
        products = #{album.products}, added_time = #{album.addedTime}, edited_time = #{album.editedTime}
        where id = #{album.id}
    </update>

    <delete id="deleteAlbumById">
        delete
        from album
        where id = #{id}
    </delete>

    <update id="updateAlbumImages" keyProperty="id">
        update album
        set
        images = #{images}, edited_time = #{editedTime}
        where id = #{id}
    </update>

    <update id="updateAlbumArtists" keyProperty="id">
        update album
        set
        artists = #{artists}, edited_time = #{editedTime}
        where id = #{id}
    </update>

    <update id="updateAlbumTrackInfo" keyProperty="id">
        update album
        set
        track_info = #{trackInfo}, edited_time = #{editedTime}
        where id = #{id}
    </update>

    <update id="updateAlbumDescription" keyProperty="id">
        update album
        set
        description = #{description}, edited_time = #{editedTime}
        where id = #{id}
    </update>

    <update id="updateAlbumBonus" keyProperty="id">
        update album
        set
        bonus = #{bonus}, edited_time = #{editedTime}
        where id = #{id}
    </update>

    <select id="getAlbumOrderByAddedTime" resultType="Album">
        select
        <include refid="selectFields"></include>
        from album
        where _s = 1
        order by added_time desc
        limit #{limit}
    </select>

    <select id="getAlbumOrderByEditedTime" resultType="Album">
        select
        <include refid="selectFields"></include>
        from album
        where _s = 1
        order by edited_time desc
        limit #{limit}
    </select>

</mapper>